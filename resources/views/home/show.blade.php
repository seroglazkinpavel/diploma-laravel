{{--@extends('layouts.base')--}}
@extends('layouts.base-category')

@section('page.title', $title->title)

@section('content')
    <section class="lesson-course-category">
        <hr>
        @foreach($categories as $cat)
            @if ($cat->getAttribute('id') == $lesson->getAttribute('category_id'))
                {{ Breadcrumbs::render('home.show', $cat, $lesson) }}
                <h1 class="main_title" >
                    @if ($cat->getAttribute('title') === 'SQL')
                        Базы данных и {{ $cat->getAttribute('title') }}
                    @else
                        Базовый курс {{ $cat->getAttribute('title') }}
                    @endif
                </h1>
            @endif
        @endforeach

        <div class="wrapper-course">
            <div class="plan">
                <p class="title-plan">План урока</p>
                <ul class="list-plan">
                    @foreach($plans as $plan)
                        <li class="item-plan">{{ $plan->title }}</li>
                    @endforeach
                </ul>
            </div>

            <h2 class="category-course-content-title">{{ $lesson->title }}</h2>
            <div class="operating-principle">
                {!! $lesson->description !!}
{{--                <h3 class="operating-principle-title"><strong>Термины урока</strong></h3>--}}
{{--                <p><strong>Система управления базами данных, сокр. СУБД (англ.--}}
{{--                        Database Management System, сокр. DBMS)</strong> — совокупность--}}
{{--                    программных и лингвистических средств общего или--}}
{{--                    специального назначения, обеспечивающих управление--}}
{{--                    созданием и использованием баз данных.--}}
{{--                </p>--}}
{{--                <p><strong>Реляционные базы данных</strong> (от англ. Relation – связь) — базы--}}
{{--                    данных, в которых данные распределены по отдельным, но--}}
{{--                    связанным между собой таблицам.</p>--}}
{{--                <p><strong>Кортеж (tuple)</strong> — это множество пар {имя аттрибута, значение}.</p>--}}
{{--                <p><strong>Отношение (relation)</strong> — это множество кортежей,--}}
{{--                    соответствующих одной схеме.</p>--}}
{{--                <p><strong>Первичный ключ (Primary key)</strong> – поле(или набор полей)--}}
{{--                    позволяющее однозначно идентифицировать запись в БД. Если--}}
{{--                    ключ состоит из нескольких полей его называют составным.</p>--}}
{{--                <p><strong>Суррогатный ключ</strong> — автоматически сгенерированное--}}
{{--                    уникальное поле, никак не связанное с информационным--}}
{{--                    содержанием записи.</p>--}}
{{--                <p><strong>Естественный ключ</strong> — ключ состоящий из информационных--}}
{{--                    полей таблицы.</p>--}}
{{--                <p><strong>SQL</strong> — Структурированный язык запросов</p>--}}
{{--                <p><strong>Декларативный язык программирования</strong> — язык--}}
{{--                    программирования описывающий результат действия, не--}}
{{--                    описывающий шаги для получения результата.</p>--}}
{{--                <p><strong>Оператор (statement)</strong> — это наименьшая автономная часть--}}
{{--                    языка программирования, команда или набор команд.</p>--}}
{{--                <p><strong>ODBC</strong> (Open Database Connectivity) — программный интерфейс--}}
{{--                    (API) доступа к базам данных.</p>--}}
{{--                <h3 class="operating-principle-title"><strong>Понятия базы данных, СУБД</strong></h3>--}}
{{--                <p>Вспомним какие основные задачи решают базы данных:</p>--}}
{{--                <p>a) Хранение данных;</p>--}}
{{--                <p>b) Получение данных;</p>--}}
{{--                <p>c) Обработка данных;</p>--}}
{{--                <p>Базу данных можно вести и на листе бумаги, бумажные--}}
{{--                    ежедневники и блокноты также являются базами данных, на--}}
{{--                    некоторых кстати нанесены по краям цветовые или буквенные--}}
{{--                    метки, что по сути является индексом для упрощения поиска--}}
{{--                    данных. Т.е. под базой данных понимаются непосредственно--}}
{{--                    сами данные.</p>--}}
{{--                <p>Когда мы говорим про данные на жестком диске компьютера,--}}
{{--                    например, то нам требуются специализированные программы--}}
{{--                    для работы с ними, в русскоязычной терминологии класс таких--}}
{{--                    программ получил название — система управления базами--}}
{{--                    данных, сокращенно СУБД. В англоязычной терминологии DBMS--}}
{{--                    - Database Management System.--}}
{{--                </p>--}}
{{--                <p>На сегодняшний день существует огромное множество--}}
{{--                    различных СУБД от коммерческих до открытых--}}
{{--                    разрабатываемых open-source сообществом, использующих--}}
{{--                    разные модели хранения данных, различные технологии поиска--}}
{{--                    и хранения данных. На сайте db-engines.com ежемесячно--}}
{{--                    составляется рейтинг СУБД, сейчас в нем более 400 СУБД--}}
{{--                    (https://db-engines.com/en/ranking).</p>--}}
{{--                <p>О том, как составляется рейтинг можно прочитать на сайте, для--}}
{{--                    нас важно отметить разнообразие СУБД и большой отрыв--}}
{{--                    первый пятерки. Ещё одна важная деталь — это различные--}}
{{--                    используемые модели данных, мы видим тут много--}}
{{--                    реляционных (используют структурирование данных по--}}
{{--                    таблицам), меньше документно-ориентированных (данные--}}
{{--                    хранятся в виде отдельных документов), графовых (данные--}}
{{--                    выстраиваются в виде связанных графов) и других СУБД,--}}
{{--                    некоторые СУБД поддерживают работу с различными моделями--}}
{{--                    данных.--}}
{{--                </p>--}}
{{--                <p>В этом курсе мы рассмотрим работу с реляционными базами--}}
{{--                    данных. Данная модель получила наиболее широкое--}}
{{--                    распространение она основана на математическом аппарате и--}}
{{--                    покрывает большую часть прикладных задач, новые ---}}
{{--                    постреляционные модели часто строятся на основе--}}
{{--                    реляционной модели.</p>--}}
{{--                <p>Сначала познакомимся с наиболее употребляемыми понятиями:</p>--}}
{{--                <p><strong>Реляционные базы данных</strong> (от англ. Relation – связь) — базы--}}
{{--                    данных, в которых данные распределены по отдельным, но--}}
{{--                    связанным между собой таблицам.--}}
{{--                    Иногда вам могут встретится термины из реляционной алгебры,--}}
{{--                    поэтому давайте их приведем и соотнесем с применяемыми на--}}
{{--                    практике:</p>--}}
{{--                <p><strong>Кортеж (tuple)</strong> — это множество пар {имя аттрибута, значение}.--}}
{{--                    (например {Фамилия, Петров}, {Телефон, +7921-123-56-69}) —--}}
{{--                    фактически это строка таблицы, где имена атрибутов — это--}}
{{--                    столбцы таблицы.--}}
{{--                </p>--}}
{{--                <p>Отношение (relation) - это множество кортежей,--}}
{{--                    соответствующих одной схеме. Например:</p>--}}
{{--                <p>{</p>--}}
{{--                <p>{ {Фамилия, Петров}, {Телефон, +7921-123-56-69}},</p>--}}
{{--                <p>{ {Фамилия, Смирнов}, {Телефон, +7956-987-78-21}},</p>--}}
{{--                <p>{ {Фамилия, Чехов}, {Телефон, +7955-968-24-36}}</p>--}}
{{--                <p>}</p>--}}
{{--                <p>Такое множество может быть визуально представлено в виде--}}
{{--                    таблицы, где описание схемы будет определено столбцами--}}
{{--                    таблицы:</p>--}}
{{--                <div class="category-course-img">--}}
{{--                    <img src="/images/table_sql_2.png" width="627" height="289" alt="table_sql_2">--}}
{{--                </div>--}}
{{--                <p><strong>Небольшой пример на кортежи:</strong></p>--}}
{{--                <p>В таблице “Сотрудники” имеется кортеж данных:</p>--}}
{{--                <p>{ [<strong>Идентиф_код</strong>], <span style="color:red;"><strong>'2931123455'</strong></span> }</p>--}}
{{--                <p>{ [<strong>Фамилия_и_инициалы</strong>], <span style="color:red;"><strong>'Петренко П.П.'</strong></span> }</p>--}}
{{--                <table>--}}
{{--                    <thead>--}}
{{--                    <tr>--}}
{{--                        <th><strong>Идентиф_код<strong></th>--}}
{{--                        <th><strong>Фамилия_и_инициалы</strong></th>--}}
{{--                    </tr>--}}
{{--                    </thead>--}}
{{--                    <tbody>--}}
{{--                    <tr>--}}
{{--                        <th><span style="color:red;"><strong>'2931123455'<strong></span></th>--}}
{{--                        <td><span style="color:red;"><strong>'Петренко П.П.'</strong></span></td>--}}
{{--                    </tr>--}}
{{--                    </tbody>--}}
{{--                </table>--}}
{{--                <p><strong>Первичный ключ (Primary key)</strong> – поле(или набор полей)--}}
{{--                    позволяющее однозначно идентифицировать запись в БД. Если--}}
{{--                    ключ состоит из нескольких полей его называют <strong>составным</strong>.</p>--}}
{{--                <p>Например, в таблице номеров телефонов — номер телефона--}}
{{--                    может быть <strong>первичным ключом</strong>.--}}
{{--                </p>--}}
{{--                <p>Не всегда в таблице по существующим данным можно--}}
{{--                    однозначно идентифицировать запись, даже используя--}}
{{--                    несколько полей, также значения этих полей могут изменится--}}
{{--                    (изменение первичного ключа может повлечь изменение во--}}
{{--                    многих связанных таблицах). В таких случаях часто используются--}}
{{--                    автоматически генерируемые атрибуты добавляемые к таблице,--}}
{{--                    например числовые последовательности увеличивающиеся при--}}
{{--                    каждой вставке в таблицу (в некоторых СУБД их называют автоинкрементом).</p>--}}
{{--                <p><strong>Суррогатный ключ</strong> - автоматически сгенерированное--}}
{{--                    уникальное поле, никак не связанное с информационным--}}
{{--                    содержанием записи.</p>--}}
{{--                <p><strong>Естественный ключ</strong> — ключ, состоящий из информационных--}}
{{--                    полей таблицы.</p>--}}
{{--                <p>У таблицы может быть несколько ключей или не быть вообще,--}}
{{--                    если ключей несколько то самый короткий из ключей выбирают--}}
{{--                    в качестве первичного (это может быть как естественный так и--}}
{{--                    суррогатный ключ).--}}
{{--                </p>--}}
{{--                <p>Давайте рассмотрим эти понятия на примере задачи по--}}
{{--                    созданию базы обучающихся, пример списка сведений о--}}
{{--                    студентах, подумайте какие ключи тут можно выделить--}}
{{--                    подумайте 1-2 минуты и разберем варианты:</p>--}}
{{--                <div class="category-course-img">--}}
{{--                    <img src="/images/table_sql_3.png" width="553" height="166" alt="table_sql_3">--}}
{{--                </div>--}}
{{--                <p>Думаю что тут всё достаточно очевидно.</p>--}}
{{--                <p>Серия и номер паспорта — хороший кандидат для первичного--}}
{{--                    ключа (потенциальный ключ), набор полей Фамилия Имя и год--}}
{{--                    рождения — скорее не будет уникальным с увеличением--}}
{{--                    данных. Вернемся к набору из полей “Серия” и “Номер--}}
{{--                    паспорта” посмотрим на недостатки этого естественного--}}
{{--                    первичного ключа:</p>--}}
{{--                <p>1. может изменятся;</p>--}}
{{--                <p>2. может отсутствовать;</p>--}}
{{--                <p>3. возможны технические ошибки при вводе, опечатки--}}
{{--                    приводящие к дубликатам;</p>--}}
{{--                <p>4. достаточно широкий (два текстовых поля) — почему это--}}
{{--                    важная характеристика? Если в базе много таблиц будут--}}
{{--                    ссылаться на эту таблицу, то они должны будут--}}
{{--                    использовать ключ таблицы, т. е. хранить эти поля. Таблица телефонов в данном случае будет выглядеть примерно так:</p>--}}
{{--                <div class="category-course-img">--}}
{{--                    <img src="/images/table_sql_4.png" width="619" height="132" alt="table_sql_">--}}
{{--                </div>--}}
{{--                <p>Задача выделения первичного ключа не такая простая как могло--}}
{{--                    показаться в начале, в большинстве случаев в реляционных--}}
{{--                    базах используются суррогатные ключи, особенно если таблицы--}}
{{--                    связаны между собой. К таблице добавляется одно числовое--}}
{{--                    поле.</p>--}}
{{--                <div class="category-course-img">--}}
{{--                    <img src="/images/table_sql_5.png" width="619" height="152" alt="table_sql_5">--}}
{{--                </div>--}}
{{--                <p>Перечислим свойства первичного ключа:</p>--}}
{{--                <p>1. однозначно идентифицирует строку таблицы, задан для каждой строки;</p>--}}
{{--                <p>2. неизменяемый или редко изменяемый;</p>--}}
{{--                <p>3. достаточно узкий;</p>--}}
{{--                <p>Основные термины из теории реляционных баз данных, которые--}}
{{--                    нам понадобятся в курсе мы вспомнили, можно двигаться дальше.</p>--}}
{{--                <h3 class="operating-principle-title"><strong>Язык SQL</strong></h3>--}}
{{--                <p>В конце 1970-х компанией IBM был разработан прототип СУБД--}}
{{--                    System R, в ней был реализован язык запросов (Structured Query--}}
{{--                    Language) <strong>SQL</strong> — Структурированный Язык Запросов. В--}}
{{--                    дальнейшем он стал применяться во многих СУБД и в силу--}}
{{--                    своего широкого распространения постепенно стал стандартом--}}
{{--                    для языков запросов в реляционных СУБД. В дальнейшем он--}}
{{--                    изменялся и расширялся, но были приняты стандарты, которые--}}
{{--                    поддерживаются многими СУБД полностью или частично.</p>--}}
{{--                <p>Первый стандарт был утвержден в 1986 году, получил название--}}
{{--                    ANSI/SQL и многие СУБД поддерживают его полностью.</p>--}}
{{--                <p></p>--}}
{{--                <p>1986 — первый международный стандарт, SQL-86 ещё называют ANSI/ISO</p>--}}
{{--                <p>1992 — стандарт SQL-92 (SQL2)</p>--}}
{{--                <p>1999 — стандарт SQL3:1999 (SQL3)</p>--}}
{{--                <p>2003 — стандарт SQL 2003</p>--}}
{{--                <p>2006 — стандарт SQL 2003</p>--}}
{{--                <p>2008 — стандарт SQL 2008</p>--}}
{{--                <p>2011 — стандарт SQL 2011</p>--}}
{{--                <p>2016 — стандарт SQL 2016.</p>--}}
{{--                <p>Наверное, многие уже знакомы с языками программирования, в--}}
{{--                    отношении SQL нужно отметить, что язык описывает результат--}}
{{--                    действия. Если, например на python программист пишет, как--}}
{{--                    получить требуемый результат, описывает все алгоритмы и шаги,--}}
{{--                    то в SQL описывается результат, что требуется получить, не--}}
{{--                    указывая какие алгоритмы и шаги выполнить для получения.--}}
{{--                    Такие языки называются <strong>декларативными</strong>.</p>--}}
{{--                <div class="category-course-img">--}}
{{--                    <img src="/images/table_sql_6.png" width="644" height="457" alt="table_sql_6">--}}
{{--                </div>--}}
{{--                <p>Итак, мы выяснили, что существует множество реляционных--}}
{{--                    СУБД, есть стандартизированный язык SQL, но вместе с тем--}}
{{--                    практически в каждой СУБД реализован свой язык запросов--}}
{{--                    где-то расширяющий стандарт, где-то изменяющий, какие-то--}}
{{--                    конструкции стандарта могут быть не реализованы, такие--}}
{{--                    вариации получили названия диалектов SQL у некоторых--}}
{{--                    наиболее популярных даже есть названия:</p>--}}
{{--                <div class="category-course-img">--}}
{{--                    <img src="/images/table_sql_7.png" width="565" height="168" alt="table_sql_7">--}}
{{--                </div>--}}
{{--                <h3 class="operating-principle-title"><strong>Основные операторы SQL</strong></h3>--}}
{{--                <p><strong>Оператор (statement)</strong> — это наименьшая автономная часть--}}
{{--                        языка программирования, команда или набор команд.--}}
{{--                        (примеры из языков программирования: оператор--}}
{{--                        присваивания :=, оператор IF, While, For и другие). Программа--}}
{{--                        представляет собой последовательность операторов.--}}
{{--                        В языке SQL можно выделить несколько групп операторов по--}}
{{--                        типу выполняемых ими задач:</p>--}}
{{--                <div class="category-course-img">--}}
{{--                    <img src="/images/table_sql_8.png" width="621" height="362" alt="table_sql_8">--}}
{{--                </div>--}}
{{--                <p><strong>Data Definition Language (DDL)</strong> – это группа операторов--}}
{{--                    определения данных. С помощью этих операторов мы--}}
{{--                    определяем объекты базы, это операторы:</p>--}}
{{--                <p>create - создание новых объектов базы данных</p>--}}
{{--                <p>alter – изменение существующих объектов</p>--}}
{{--                <p>drop – удаление объектов</p>--}}
{{--                <p><strong>Data Manipulation Language (DML)</strong> – это группа операторов для--}}
{{--                    манипуляции с данными. К ним относятся:</p>--}}
{{--                <p>insert – добавление новых данных</p>--}}
{{--                <p>update – изменение данных</p>--}}
{{--                <p>delete – удаление данных</p>--}}
{{--                <p>select – выборка данных</p>--}}
{{--                <p><strong>Data Control Language (DCL)</strong> – группа операторов определения--}}
{{--                    доступа к данным, с помощью них мы можем управлять правами--}}
{{--                    доступа к объектам базы.</p>--}}
{{--                <p>Grant – предоставить права на объект базы--}}
{{--                    revoke – отозвать у пользователя права на объект</p>--}}
{{--                <p><strong>Transaction Control Language (TCL)</strong> – группа операторов для--}}
{{--                    управления транзакциями. <strong>Транзакция</strong> - это набор команд или--}}
{{--                    инструкций которые выполняются как единый блок, в котором--}}
{{--                    либо все команды успешно выполнены и все изменения--}}
{{--                    сохранены, либо при возникновении ошибки, ни одна команда--}}
{{--                    из блока не будет выполнена и изменения не будут внесены в--}}
{{--                    базу, база останется в том же состоянии в котором была до--}}
{{--                    выполнения транзакции. Про транзакции в базах данных мы--}}
{{--                    поговорим детальнее в следующих уроках, пока же перечислим--}}
{{--                    основные команды для работы с ними:--}}
{{--                </p>--}}
{{--                <p>begin transacton – определяет начало транзакции;</p>--}}
{{--                <p>commit transaction — применяет транзакцию, конечная точка;</p>--}}
{{--                <p>rollback transaction — откатывает все изменения транзакции;</p>--}}
{{--                <p>save transaction — устанавливает промежуточную точку сохранения внутри транзакции.</p>--}}
{{--                <p>В принципе это и все операторы sql, мы посмотрели обобщенно--}}
{{--                    на этот инструмент и дальше будем детальнее разбираться с--}}
{{--                    каждым оператором.</p>--}}
{{--                <p>Сейчас посмотрим что СУБД делает, получая от пользователя--}}
{{--                    инструкции на языке SQL.</p>--}}
{{--                <h3 class="operating-principle-title"><strong>Основные компоненты СУБД, установка</strong></h3>--}}
{{--                <p>Попробуем построить обобщенную архитектуру СУБД, несмотря--}}
{{--                    на большое количество различных вендоров и СУБД можно--}}
{{--                    выделить общие функциональные блоки:--}}
{{--                </p>--}}
{{--                <p>а) Подсистема постоянного хранения данных <strong>(Storage--}}
{{--                        Engine)</strong>. В большинстве случаев СУБД использует файлы и--}}
{{--                    каталоги операционной системы, некоторые, например--}}
{{--                    Oracle могут работать напрямую с дисками минуя слой--}}
{{--                    операционной системы. Может использоваться сжатие--}}
{{--                    данных.</p>--}}
{{--                <p>б) Парсер и транслятор запросов <strong>(Query parser)</strong>. СУБД--}}
{{--                    получает от пользователя SQL запрос (это текст) его--}}
{{--                    необходимо проверить на синтаксис, перевести--}}
{{--                    (транслировать) во внутренний формат, определить какие--}}
{{--                    объекты, таблицы например используются</p>--}}
{{--                <p>в) Оптимизатор запросов <strong>(Query optimizer)</strong>. Как мы уже--}}
{{--                    говорили запрос не определяет четкого алгоритма--}}
{{--                    действий над объектами (в каком порядке соединять--}}
{{--                    таблице, какие индексы использовать и многие другие--}}
{{--                    технические детали), поэтому СУБД пытается построить--}}
{{--                    наиболее оптимальный план выполнения — алгоритм--}}
{{--                    выполнения запроса. Дальше в СУБД будет выполняться--}}
{{--                    выбранный план запроса.</p>--}}
{{--                <p>г) Подсистема выполнения <strong>(Query executor)</strong>. Получает--}}
{{--                    готовый план и шаг за шагом выполняет инструкции.</p>--}}
{{--                <p>д) Системы кэширования данных. Обращение в постоянное--}}
{{--                    хранилище, к жесткому диску довольно дорогостоящий и--}}
{{--                    медленный процесс, поэтому часто используемые данные--}}
{{--                    СУБД пытаются кэшировать — хранить например в--}}
{{--                    оперативной памяти или ssd дисках</p>--}}
{{--                <p>Большинство СУБД используют клиент-серверную архитектуру,--}}
{{--                    на выделенном сервере или кластере устанавливается СУБД, с--}}
{{--                    клиентских компьютеров выполняется подключение и передача--}}
{{--                    запросов, вся вычислительная нагрузка выполнятся сервером.--}}
{{--                    Для подключения к СУБД используются компоненты доступа —--}}
{{--                    подпрограммы, иногда их называют драйверами, обычно они--}}
{{--                    предоставляются разработчиком СУБД, для использования их в--}}
{{--                    языках программирования разработаны модули и фреймворки--}}
{{--                    которые скрывают рутинную работу от программиста. Как--}}
{{--                    правило модули для работы с базой данных предоставляют api--}}
{{--                    для подключения к бд, выполнения запроса и получения--}}
{{--                    результирующего набора данных. Для упрощения--}}
{{--                    взаимодействия с СУБД были разработаны универсальные--}}
{{--                    стандарты, широкое распространение получил ODBC</p>--}}
{{--                <p><strong>ODBC</strong> (Open Database Connectivity) — это программный--}}
{{--                    интерфейс (API) доступа к базам данных.</p>--}}
{{--                <p>Этот API не зависит ни от одной СУБД или операционной--}}
{{--                    системы, поддерживается большинством современных СУБД.</p>--}}
{{--                <p>В среде java широко распространен стандарт JDBC (Java--}}
{{--                    DataBase Connectivity).</p>--}}
{{--                <p>В этом курсе мы будем использовать СУБД MySQl, сейчас--}}
{{--                    рассмотрим основные моменты установки. Презентации с--}}
{{--                    инструкцией приложены к материалам урока и вы сможете--}}
{{--                    выполнить установку и минимальную настройку, если возникнут--}}
{{--                    трудности то разберем их на семинаре.</p>--}}
{{--                <h3 class="operating-principle-title"><strong>Клиентские приложения для работы с СУБД</strong></h3>--}}
{{--                <p>Для работы с СУБД и написания SQL запросов существует--}}
{{--                    отдельный класс приложений. Часть из них предоставляются--}}
{{--                    разработчиками СУБД например SQL Server Management Studio,--}}
{{--                    так и разрабатываются сторонними компаниями например--}}
{{--                    DataGrip от компании JetBrains.</p>--}}
{{--                <div class="category-course-img">--}}
{{--                    <img src="/images/table_sql_9.png" width="665" height="330" alt="table_sql_9">--}}
{{--                </div>--}}
{{--                <p>Иногда для отладки или чтобы обменяться кодом используются--}}
{{--                    online sql песочницы, они позволяют выполнить запрос прямо--}}
{{--                    на сайте:</p>--}}
{{--                <p>1. sqlfiddle.com;</p>--}}
{{--                <p>2. www.db-fiddle.com.</p>--}}
{{--                <p>Под песочницей (sandbox) – понимается изолированная среда--}}
{{--                    разработки. Обычно такая среда используется для тестирования--}}
{{--                    программ, безопасного выполнения полученных из не--}}
{{--                    проверенных источников программ. Применительно к базам--}}
{{--                    данных такие среды также позволяют быстро проверить запрос--}}
{{--                    на разных СУБД.</p>--}}
{{--                <h3 class="operating-principle-title"><strong>Работа с БД ,используя графический интерфейс, создание и--}}
{{--                        просмотр объектов</strong></h3>--}}
{{--                <p>Рассмотрим интерфейс MySQl.</p>--}}
{{--                <div class="category-course-img">--}}
{{--                    <img src="/images/table_sql_10.png" width="586" height="275" alt="table_sql_10">--}}
{{--                </div>--}}
{{--                <p>Необходимо войти в нашу БД: для этого нажимаем на имя--}}
{{--                    нашего подключения и вводим данные для входа (их вы--}}
{{--                    прописывали при установке MySQL). Если все выполнится--}}
{{--                    корректно, нас ожидает вот такое окно:</p>--}}
{{--                <div class="category-course-img">--}}
{{--                    <img src="/images/table_sql_11.png" width="656" height="351" alt="table_sql_11">--}}
{{--                </div>--}}
{{--                <p>Попробуем создать нашу первую схему: переходим во вкладку--}}
{{--                    "Shemas" в правой нижней части экрана и нажимаем на--}}
{{--                    клавишу создания схемы:</p>--}}
{{--                <p>UI мы будем использовать только на сегодняшнем уроке.--}}
{{--                    Команды в терминале будем изучать на следующем уроке.</p>--}}
{{--                <div class="category-course-img">--}}
{{--                    <img src="/images/table_sql_12.png" width="649" height="243" alt="table_sql_12">--}}
{{--                </div>--}}
{{--                <p>В результате получим следующее окно:</p>--}}
{{--                <div class="category-course-img">--}}
{{--                    <img src="/images/table_sql_13.png" width="653" height="280" alt="table_sql_13">--}}
{{--                </div>--}}
{{--                <p>Имя нашей базы данных можно изменить со стандартного на--}}
{{--                    <strong>"users"</strong>. Обратите внимание, что имя должно стоять из 1-2 слов,--}}
{{--                    без нижних подчеркиваний. Кодировка utf-8 поддерживает и--}}
{{--                    русские символы.--}}
{{--                </p>--}}
{{--                <p>Вернемся к базе данных. Первую табличку назовем <strong>students</strong>.--}}
{{--                    Она будет хранить данные о пользователях информационной--}}
{{--                    системы, в поле "table Name" впишем имя таблицы, в разделе--}}
{{--                    формы "Columns" создадим поля таблицы:</p>--}}
{{--                <p>— <strong>Первое поле id</strong> будет содержать уникальный номер--}}
{{--                    пользователя, зададим ему свойства: Auto Increment (AI), Not Null--}}
{{--                    (NN), Primary key(PK) и Unique (UQ), в разделе Data type выберем--}}
{{--                    целочисленный тип integer</p>--}}
{{--                <p>— <strong>Второе поле fio</strong>, где будет хранится Ф.И.О. пользователя,--}}
{{--                    установим полю свойства: Not Null, в разделе Data type выберем--}}
{{--                    строковый тип VARCHAR и зададим количество символов в 255.</p>--}}
{{--                <p>— <strong>Третье поле login</strong>, будет содержать логин пользователя, оно--}}
{{--                    должно быть уникальным, как и поле id, поэтому установим ему--}}
{{--                    свойство Unique и зададим количество символов в 255.--}}
{{--                </p>--}}
{{--                <p>— Следующие поля: <strong>password</strong> содержащее пароль, e_mail--}}
{{--                    содержащее адрес электронной почты и поле <strong>type</strong>, содержащее--}}
{{--                    тип пользователя будут без особых свойств, со строковым типом--}}
{{--                    VARCHAR длинной в 255 символов.</p>--}}
{{--                <p>После проделанных манипуляций форма с именем таблицы--}}
{{--                    users будет выглядеть так:</p>--}}
{{--                <div class="category-course-img">--}}
{{--                    <img src="/images/table_sql_14.png" width="653" height="434" alt="table_sql_14">--}}
{{--                </div>--}}
{{--                <p>Для сохранения нашей таблицы используем кнопку "Apply".--}}
{{--                    Добавим данные в нашу табличку, заполнив первыми--}}
{{--                    значениями:</p>--}}
{{--                <div class="category-course-img">--}}
{{--                    <img src="/images/table_sql_15.png" width="270" height="248" alt="table_sql_15">--}}
{{--                </div>--}}
{{--                <p>Поле ID заполняется автоматически при помощи свойства--}}
{{--                    "автоинкремент":</p>--}}
{{--                <div class="category-course-img">--}}
{{--                    <img src="/images/table_sql_16.png" width="654" height="326" alt="table_sql_16">--}}
{{--                </div>--}}
{{--                <h3 class="operating-principle-title"><strong>Запрос выборки данных с простыми условиями</strong></h3>--}}
{{--                <p>Давайте разберем синтаксис простого SQL запроса выборки--}}
{{--                    данных и научимся читать его определение.</p>--}}
{{--                <p>1. Вывод всех данных из таблицы</p>--}}
{{--                SELECT * FROM student;--}}
{{--                <p>Этим запросом будут выведены все строки из таблицы student и--}}
{{--                    все столбцы ( * - означает все доступные стобцы)</p>--}}
{{--                <p>2. Вывод ограниченного числа столбцов — нужно явно--}}
{{--                    перечислить столбцы</p>--}}
{{--                <p>SELECT fio, login FROM student;</p>--}}
{{--                <p>Этим запросом будут выведены все строки из таблицы student,--}}
{{--                    но только столбцы fio и login</p>--}}
{{--                <p>3. Применение фильтров, отбор данных по условиям</p>--}}
{{--                <p>SELECT * FROM student WHERE login=’test2’;</p>--}}
{{--                <p>На следующей уроке мы продолжим изучение языка sql,--}}
{{--                    научимся писать запросы создания таблиц, вставки и--}}
{{--                    редактирования данных. Рассмотрим какие типы данных--}}
{{--                    используются в базах, какие ограничения они накладывают и--}}
{{--                    научимся правильно выбирать тип колонки.--}}
{{--                </p>--}}
            </div>
            @if (session('success'))
                <div class="alert alert-success" role="alert">
                    <strong>{{ session('success') }}</strong>
                </div>
            @else
                <div class="alert alert-error" role="alert">
                    <strong>{{ session('error') }}</strong>
                </div>
            @endif
            @auth()
                <div class="button">
                    <a href="#" id="open_pop_up">Оценить урок</a>
                </div>
                <div class="pop_up" id="pop_up">
                    <div class="pop_up_conteiner">
                        <div class="pop_up_body" id="pop_up_body">
                            <p>Оцените качество урока</p>
                            <form action="{{ route('home.estimation', $lesson->id) }}" name="myForm" id="myForm" method="post">
                                @csrf
                                <select id="select-form" class="select-events" size="4" name="mySelect">
                                    <option value="Отлично" class="icon-1"></option>
                                    <option value="Хорошо" class="icon-2"></option>
                                    <option value="Слабо" class="icon-3"></option>
                                    <option value="Очень плохо" class="icon-4"></option>
                                </select>
                                <div class="form-radio">
                                    <label class="form-label">Было ли вам достаточно информации по теме?</label>
                                    <div class="form-group">
                                        <label>
                                            <input type="radio" name="payment" value="Да, все было понятно и хватило" class="real-radio-btn">
                                            <span class="custom-radio-btn"></span>
                                            Да, все было понятно и хватило
                                        </label>
                                    </div>
                                    <div class="form-group">
                                        <label>
                                            <input type="radio" name="payment" value="Было много полезного, но хотелось бы больше" class="real-radio-btn">
                                            <span class="custom-radio-btn"></span>
                                            Было много полезного, но хотелось бы больше
                                        </label>
                                    </div>
                                    <div class="form-group">
                                        <label>
                                            <input type="radio" name="payment" value="Было недостаточно" class="real-radio-btn">
                                            <span class="custom-radio-btn"></span>
                                            Было недостаточно
                                        </label>
                                    </div>
                                    <div class="form-group">
                                        <label>
                                            <input type="radio" name="payment" value="Я ничего не понял" class="real-radio-btn">
                                            <span class="custom-radio-btn"></span>
                                            Я ничего не понял
                                        </label>
                                    </div>
                                </div>
                                <div class="col-12" data-aos="fade-up">
                                    <label for="message" class="sr-only">Comment</label>
                                    <textarea name="message" id="message" class="form-control" placeholder="Дополните отзыв об уроке!"cols="25" rows="5"></textarea>
                                </div>
                                {{--                        <button>Отправить</button>--}}
                                <input type="submit" name="submit" value="Отправить" class="form-submit">
                            </form>
                            <div class="pop_up_close" id="pop_up_close">&#10006</div>
                        </div>
                    </div>
                </div>
            @endauth

            <div class="comment-list">
                <h2 class="section-title">Комментарии ({{ $comments->count() }})</h2>
                <p>Чтобы оставить комментарий, нужно зарегестрироваться.</p>
                @foreach($comments as $comment)
                    <hr>
                    <div class="comment-text">
                        <span class="username">
                            <div>
                                {{ $comment->name }}
                            </div>
                            <span class="text-muted float-right">{{ $comment->created_at }}</span>
                        </span>
                        {{ $comment->message }}
                    </div>
                @endforeach
            </div>
            @auth()
                <div class="comment-section">
                    <h2 class="section-title mb-5" data-aos="fade-up">Отправить комментарий</h2>
                    @if (session('success-comment'))
                        <div class="alert alert-success" role="alert">
                            <strong>{{ session('success-comment') }}</strong>
                        </div>
                    @else
                        <div class="alert alert-error" role="alert">
                            <strong>{{ session('error-comment') }}</strong>
                        </div>
                    @endif
                    <form class="form-comment" action="{{ route('home.comment', $lesson->id) }}" method="post">
                        @csrf
                        <div class="form-group-cjmment col-12" data-aos="fade-up">
                            <label for="comment" class="sr-only">Comment</label>
                            <textarea name="message" id="comment" class="form-control" placeholder="Напишите комментарий!"cols="25" rows="5"></textarea>
                        </div>
                        <input type="hidden" name="post_id" value="{{ $lesson->id }}">

                        <button type="submit" class="btn">Отправить</button>
                    </form>
                </div>
            @endauth

        </div>
        <h2 class="title-course"><strong>Содерхание программы</strong></h2>
        <ul class="course-list">
            @foreach($posts as $item)
{{--                <li class="category-course-item {{ request()->is('home.show*') ? 'active' : '' }}">--}}
{{--                    <a class="nav-link " href="{{ route('home.show', $item->id) }}">{{ $item->title }}</a>--}}
{{--                </li>--}}
                <li class="course-item">
                    <a class="@if(request()->routeIs('home.show.*')) active @endif" href="{{ route('home.show', $item->id) }}">{{ $item->title }}</a>
                </li>
                <div class="practice">
                    @if (!empty($practice->posts_id))
                    <a href="{{ route('practice.show', $practice->posts_id) }}">Практика</a>
                    @else
                        <p>Практика в разработке</p>
                    @endif
                </div>

            @endforeach
        </ul>
    </section>
@endsection
@push('css')
    <style>
        table {
            margin-top: 10px;
            margin-bottom: 10px;
        }
        table,
        tr > * {
            border: 1px solid;
            padding: 7px;
        }
        .lesson-course-category {
            /*margin-top: 100px;*/
            margin-bottom: 80px;
        }
        .lesson-course-category hr {
            margin-bottom: 10px;
        }
        .operating-principle-title {
            font-size: 20px;
            margin:10px 0;
        }
        .category-course-img {
            margin:10px auto;
            max-width: 777px;
        }
        .code-background {
            background: #EDEFF0;
            padding: 10px;
            margin: 15px 0;
            width: 100%;
            overflow: scroll;
            height: auto;
            border: 1px solid #AFB5BC;
        }
        /*.category-course-img img {*/
        /*    display: inline-block;*/
        /*    margin:0 auto;*/
        /*    max-width: 777px;*/
        /*}*/
        .plan {
            background:#b3d9a8;
            padding: 15px;
            width: 30%;
            float : left;
            margin-right: 20px;
            margin-bottom: 7px;
        }
        .title-plan {
            font-size: 24px;
            text-align: center;

        }
        .list-plan {
            /*list-style-type: circle;*/
            list-style-type: decimal;
            padding-left: 25px;
        }
        .item-plan {
            margin-top: 10px;
            font-size: 18px;
        }
        /*.item-plan:before {
            content: "\2192";

        }*/
        .form-comment .btn {
            cursor: pointer;
            font-size: 16px;
            line-height: 20px;
            padding: 10px;
            width: 40%;
            margin-top: 15px;
            border-radius: 5px;
            border: 1px solid #E5E5E5;
            background: #F0F0F0;
        }

        .active {
            color: #9c9c9c;
        }
        /*.active {*/
        /*    background-color: #3498db;*/
        /*    color: #fff;*/

        /*}*/
        /*.category-course-content-title {*/
        /*    font-size: 24px;*/
        /*    margin: 0 auto;*/
        /*}*/
        .comment-list {
            margin: 45px 0;
        }
        .comment-section {
            width: 100%;
        }
        .section-title {
            font-size: 20px;
            margin-bottom: 10px;
        }
        .form-comment .form-control {
            width: 100%;
        }

        /* Start всплывающее окно */
        * {
            margin:0;
            padding:0;
            box-sizing: border-box;
        }

        .button {
            margin-top: 40px;
            text-align: center;
        }

        .button a {
            font-family: Montserrat;
            /*background-color: orange;*/
            background-color: #7896CB;
            padding: 20px 50px;
            border-radius: 10px;
            text-decoration: none;
            color: #fff;
            font-weight: 500;
        }

        .pop_up {
            /*display: none;*/
            width: 100%;
            height: 100%;
            position: fixed;
            left: 0;
            top: 0;
            /*background-color: rgba(0,0 , 0, .8);*/
            background-color: transparent;
            z-index: 2;
            transform: translateY(-44.5%) scale(0);
            transition: .4s ease-in-out;
        }

        .pop_up.active {
            /*display: block;*/
            transform: translateY(0%) scale(1);
            background-color: rgba(0,0 , 0, .8);
        }

        .pop_up_conteiner {
            display: flex;
            width: 100%;
            height: 100%;
        }

        .pop_up_body {
            margin:auto;
            /*width: 500px;*/
            background-color: #fff;
            border-radius: 10px;
            text-align: center;
            padding: 100px 15px 110px 15px;
            position: relative;
        }

        .pop_up_body p {
            font-size: 28px;
            font-family: Montserrat;
            font-weight: 600;
            color: #22262D;
            margin-bottom: 40px;
        }

        .pop_up_body input {
            display: block;
            margin: 25px auto 0px auto;
            width: 330px;
            padding: 17px 20px;
            background-color: #E5E5E5;
            border-radius: 10px;
            border: none;
            font-family: Montserrat;
            font-weight: 500;
            font-size: 18px;
            color: #B9909F;
        }

        .pop_up_body input:focus {
            outline:none;
        }

        .pop_up_body .form-submit {
            cursor: pointer;
            display: block;
            /*width: 330px;*/

            margin: 60px auto 0px auto;
            padding: 10px 20px;
            font-family: Montserrat;
            font-weight: 500;
            font-size: 16px;
            border: none;
            color: #fff;
            border-radius: 10px;
            /*background-color: orange;*/
            /*background-color: #7896CB;*/
            background-color: #CECECD;
        }

        .pop_up_close {
            position: absolute;
            top: 15px;
            right: 15px;
            font-size: 21px;
            cursor: pointer;
        }
        /* End всплывающее окно */
        /* Start select */

        .form-label {

            display: block;
            font-size: 20px;
            font-family: Montserrat;
            font-weight: 600;
            color: #22262D;
            margin: 20px;

        }

        select
        {
            /*width: 265px;*/
            border: none;
        }

        option
        {
            /*padding-left: 20px;*/
            padding-top: 3px;
            padding-bottom: 3px;
            /*height: 64px;*/
            height: 90px;
            display: inline-block;
            /*width: 64px;*/
            width: 90px;
        }

        .icon-1:hover {
            background: url('../images/smiley.png') no-repeat;

        }

        .icon-2:hover {
            background: url('../images/smiley_2.png') no-repeat;

        }

        .icon-3:hover {
            background: url('../images/smiley_4.png') no-repeat;

        }

        .icon-4:hover {
            background: url('../images/smiley_6.png') no-repeat;

        }

        .icon-1
        {
            background: url('../images/smiley_1.png') no-repeat;
            background-size: 64px;
            /*background: url('../images/smiley_8.png') no-repeat;*/
            /*background-size: 90px;*/
            padding-left: 20px;
            background-position: 0 1px;
        }

        .icon-2
        {
            background: url('../images/smiley_3.png') no-repeat;
            background-size: 64px;
            /*background: url('../images/smiley_10.png') no-repeat;*/
            /*background-size: 90px;*/
            padding-left: 20px;
            /*background-position: 0 1px;*/
        }

        .icon-3
        {
            background: url('../images/smiley_5.png') no-repeat;
            background-size: 64px;
            /*background: url('../images/smiley_12.png') no-repeat;*/
            /*background-size: 90px;*/
            padding-left: 20px;
            /*background-position: 0 1px;*/
        }

        .icon-4
        {
            background: url('../images/smiley_7.png') no-repeat;
            background-size: 64px;
            /*background: url('../images/smiley_14.png') no-repeat;*/
            /*background-size: 90px;*/
            padding-left: 20px;
            /*background-position: 0 1px;*/
        }

        select.icon-1,
        select.icon-2,
        select.icon-3,
        select.icon-4
        {
            padding-top: 2px;
            padding-bottom: 3px;
            padding-left: 16px;
            background-position: 0 1px;
        }
        /* End select */
        /* Start Радио кнопки */

        .form-group {
            text-align: initial;
            margin-left: 80px;
            margin-bottom: 10px;
        }
        /* Рисуем внешний круг радиокнопки*/
        .custom-radio-btn {
            position: relative; /* Родительский элемент*/
            display: inline-block; /* Для применения рамок, размеров*/
            width: 16px;
            height: 16px;
            background: #fff;
            border: 1px solid #a3a4a7; /*#a3a4a7 Толщина, стиль, цвет рамки#CECECD*/
            border-radius: 50%; /* Получение круга*/
            vertical-align: text-top; /* Выравнивание кнопки по центру*/
            margin-right: 5px; /* Отступ между кнопкой и меткой*/
        }

        /* Рисуем внутренний круг */
        .custom-radio-btn::before {
            content: '';
            display: inline-block;
            width: 8px;
            height: 8px;
            background: #a3a4a7;
            border-radius: 50%;

            /* Выравниваем по центру относительно внешнего круга */
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%) scale(0);

            /* Плавный переход трансформации масштабирования */
            transition: 0.2s ease-in;
        }
        .real-radio-btn:checked + .custom-radio-btn::before {
            transform: translate(-50%, -50%) scale(1);
        }
        .real-radio-btn {
            /* Скрываем реальную радио кнопку*/
            width: 0;
            height: 0;
            position: absolute;
            opacity: 0;
            z-index: -1;
        }

        .form {
            /*width: 350px;*/
            margin: 0 auto;
        }
        .form-control {
            width: 100%;
        }
        /* End Радио кнопки */
        /* Start message and error */
        .alert-success {
            text-align: center;
            color: #2ca02c;
            margin-top: 15px;
        }
        .alert-error {
            text-align: center;
            color: #9D2334;
            margin-top: 15px;
        }
        /* End message and error */
        @media (max-width: 768px) {
            .plan {
                float: none;
                width: 100%;
            }
        }
        @media (max-width: 425px) {
            .main_title {
                font-size: 28px;
            }
            .category-course-content-title {
                font-size: 24px;
            }
        }
        @media (max-width: 425px) {
            .pop_up_body {
                padding:50px 15px;
            }
        }
        @media (max-width: 375px) {
            .icon-1, .icon-2, .icon-3, .ison-4  {
                max-width: 70px;

            }
            .form-group {
                margin-left: 0;
            }
            .form-control, .col-12, .form-radio {
                max-width: 310px;
                margin: 0 auto;
            }
            .pop_up_close {
                right: 40px;
            }
            .pop_up_body p {
                font-size: 26px;
            }
            .pop_up_body .form-submit {
                margin: 30px auto 0px;
            }
        }
    </style>
@endpush
@push('js')
<script>
    let coll = document.getElementsByClassName('collapsible');
    for (let i = 0; i < coll.length; i++) {
        coll[i].addEventListener('click', function() {
            this.classList.toggle('active');
            let content = this.nextElementSibling;
            if (content.style.maxHeight) {
                content.style.maxHeight = null;
            }else{
                content.style.maxHeight = content.scrollHeight + 'px'
            }
        })
    }

    // всплывающее окно
    const openPopUp = document.getElementById('open_pop_up');
    const closePopUp = document.getElementById('pop_up_close');
    const popUp = document.getElementById('pop_up');

    openPopUp.addEventListener('click', function(e){
        e.preventDefault();
        popUp.classList.add('active');
    })

    closePopUp.addEventListener('click', () => {
        popUp.classList.remove('active');
    })

    // select
    // Функция очистки класса
    function cleanSelect (select) {
        // Очищаем от стилей
        return $(select).removeClass('icon-1').removeClass('icon-2').removeClass('icon-3').removeClass('icon-4')
    }

    // Формируем select и его обработчики
    function formSelect() {
        // получаем выпадающий список с уже очищенными классами
        var select = cleanSelect('.select-events');

        // Добавляем класс, который соответствует выбранному элементу
        //select.addClass(select.val() == '1' ? 'icon-1' : 'icon-2');
        select.filter(function() {
            return ($(this).val() == '1');
        }).addClass('icon-1');
        select.filter(function() {
            return ($(this).val() == '2');
        }).addClass('icon-2');
        select.filter(function() {
            return ($(this).val() == '3');
        }).addClass('icon-3');
        select.filter(function() {
            return ($(this).val() == '4');
        }).addClass('icon-4');
        // Добавляем стили, чтобы у списка не было видно полосы прокрутки
        select.css({ height: '70px', overflow: 'hidden', zIndex: '40000', padding:0 });

        // Определяем обработчик на событие ухода мышки с области элемента
        select.on('mouseleave', function () {
            // Устанавливаем обычный размер
            this.size = 4;
            // Добавляем класс стиля в соответствии с выбранным элементом
            //cleanSelect(this).addClass($(this).val() == '1' ? 'icon-1' : 'icon-2');
            cleanSelect(this).filter(function() {
                return ($(this).val() == '1');
            }).addClass('icon-1');
            cleanSelect(this).filter(function() {
                return ($(this).val() == '2');
            }).addClass('icon-2');
            cleanSelect(this).filter(function() {
                return ($(this).val() == '3');
            }).addClass('icon-3');
            cleanSelect(this).filter(function() {
                return ($(this).val() == '4');
            }).addClass('icon-4');
        });

        // Определяем обработчик на событие ухода мышки с области элемента
        select.on('mouseover', function () {
            // Очищаем стиль списка, чтобы он не мешал отображению
            cleanSelect(this);
            // Устанавливаем размер, равный количеству элементов
            this.size = $(this).find('option').length;
        });
    }

    // После загрузки DOM - получаем список
    $(function () {
        formSelect();
    });
    /* === Start Обработка формы === */
    // $(function() {
    //     // при нажатию на кнопку с типом submit
    //     $('#myForm input[type="submit"]').click(function(e) {
    //         // отменяем стандартное поведение браузера
    //         e.preventDefault();
    //         // переменная, которая будет содержать данные серилизации
    //         var $data;
    //
    //         $data = $(this).parent('form').serializeArray();
    //         console.log($data);
    //         // для отправки данных будем использовать технологию ajax
    //         //   url - адрес скрипта, с помощью которого будем обрабатывать форму на сервере
    //         //   type - метод отправки запроса (POST)
    //         //   data - данные, которые необходимо передать серверу
    //         //   success - функция, которая будет вызвана, когда ответ прийдёт с сервера
    //         $.ajax({
    //             url: $(this).parent('form').attr('action'),
    //             type: 'post',
    //             data: $data,
    //             success: function(result) {
    //                 //popUp.classList.remove('active');
    //                 location.reload();
    //             }
    //         })
    //     });
    // });

    /* === End Обработка формы === */

</script>
@endpush
